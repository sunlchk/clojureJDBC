cmdhistory=["(hello-world [\\"SIva\\"])" "(hello-world)" "\\"hhh\\"" "(/ 1 0)" "(/ 10 2)" "(hello \\"Rich\\")" "(+2 2)" "(+ 2 2)" "(println \\"hello\\")" "(defn blank? [str]\\r\\n  (every? \#(Character/isWhitespace %) str))" "(defn hello-world [username] \\r\\n  (println (format \\"Hello, %s\\" username)))" "(defrecord Person [first-name last-name])" "\\n(def foo (->Person \\"Aaron\\" \\"Bedra\\"))" "\#'user/foo" "\#\:user.Person{\:first-name \\"Aaron\\", \:last-name \\"Bedra\\"}" "(defn hello-world [username] \\r\\n  (println (format \\"Hello, %s\\" username)))" "(def accounts (ref \#{}))\\r\\n(defstruct account \:id \:balance)" "(dosync\\r\\n(alter accounts conj (->Account \\"CLJ\\" 1000.00)))" "lein repl" "(hello \\"Stu\\")" "((fn [x y]\\r\\n(println \\"Making a set\\")\\r\\n\#{x y})\\r\\n1 2)" "(def a (rationalize 1.0e50))\\r\\n(def b (rationalize -1.0e50))\\r\\n(def c (rationalize 17.0e00))" "(+ (+ a b) c)" "(defn fnth [n]\\r\\n(apply comp\\r\\n(cons first\\r\\n(take (dec n) (repeat rest)))))\\r\\n((fnth 5) '[a b c d e])" "(map (comp\\r\\nkeyword\\r\\n\#(.toLowerCase %)\\r\\nname)\\r\\n'(a B C))" "((partial + 5) 100 200)" "(let [truthiness (fn [v] v)]\\r\\n[((complement truthiness) true)\\r\\n((complement truthiness) 42)\\r\\n((complement truthiness) false)\\r\\n((complement truthiness) nil)])" "(sort [1 5 7 0 -42 13])" "(defn put-things [m]\\r\\n(into m {\:meat \\"beef\\" \:veggie \\"broccoli\\"}))" "(put-things {})" "(ns joy.gui.DynaFrame\\n  \\"The dynamic frame class example from section 10.2\\"\\n  (\:gen-class\\n   \:name         joy.gui.DynaFrame\\n   \:extends      javax.swing.JFrame\\n   \:prefix       df-\\n   \:implements   [clojure.lang.IMeta]\\n   \:state        state\\n   \:init         init\\n   \:constructors {[String] [String]\\n                  [] [String]}\\n   \:methods      [[display [java.awt.Container] void]\\n                  \#^{\:static true} [version [] String]])\\n  (\:import (javax.swing JFrame JPanel JComponent)\\n           (java.awt BorderLayout Container)))\\n\\n\\n(defn df-init [title]\\n  [[title] (atom {\:\:title title})])\\n\\n(defn df-meta [this] @(.state this))\\n\\n(defn version [] \\"1.0\\")\\n\\n(defn df-display [this pane]\\n  (doto this\\n    (-> .getContentPane .removeAll)\\n    (.setContentPane (doto (JPanel.)\\n                       (.add pane BorderLayout/CENTER)))\\n    (.pack)\\n    (.setVisible true)))" "(use 'clojure.java.jdbc)\\r\\n \\r\\n(let [db-host \\"10.10.10.101\\"\\r\\n      db-port 3306\\r\\n      db-name \\"kavya\\"]\\r\\n \\r\\n  (def db {\:classname \\"com.mysql.jdbc.Driver\\" ; must be in classpath\\r\\n           \:subprotocol \\"mysql\\"\\r\\n           \:subname (str \\"//\\" db-host \\"\:\\" db-port \\"/\\" db-name)\\r\\n           ; Any additional keys are passed to the driver\\r\\n           ; as driver-specific properties.\\r\\n           \:user \\"arun\\"\\r\\n           \:password \\"welcome\\"}))" "(use 'clojure.java.jdbc)\\r\\n    \\r\\n   (let [db-host \\"10.10.10.101\\"\\r\\n         db-port 3306\\r\\n         db-name \\"kavya\\"]\\r\\n    \\r\\n     (def db {\:classname \\"com.mysql.jdbc.Driver\\" ; must be in classpath\\r\\n              \:subprotocol \\"mysql\\"\\r\\n              \:subname (str \\"//\\" db-host \\"\:\\" db-port \\"/\\" db-name)\\r\\n              ; Any additional keys are passed to the driver\\r\\n              ; as driver-specific properties.\\r\\n              \:user \\"arun\\"\\r\\n              \:password \\"welcome\\"}))" "(use 'clojure.java.jdbc)\\r\\n \\r\\n(let [db-host \\"10.10.10.101\\"\\r\\n      db-port 3306\\r\\n      db-name \\"kavya\\"]\\r\\n \\r\\n  (def db {\:classname \\"com.mysql.jdbc.Driver\\" ; must be in classpath\\r\\n           \:subprotocol \\"mysql\\"\\r\\n           \:subname (str \\"//\\" db-host \\"\:\\" db-port \\"/\\" db-name)\\r\\n           ; Any additional keys are passed to the driver\\r\\n           ; as driver-specific properties.\\r\\n           \:user \\"arun\\"\\r\\n           \:password \\"welcome\\"}))" "(\:require [clojure.java.jdbc \:as sql])" "(ns test.core\\r\\n   (\:require [clojure.java.jdbc \:as sql]))\\r\\n(defn -main []\\r\\n   (def mysql-db {\\r\\n      \:subprotocol \\"mysql\\"\\r\\n      \:subname \\"//10.10.10.101\:3306/kavya\\"\\r\\n      \:user \\"arun\\"\\r\\n      \:password \\"welcome\\"})\\r\\n   (println (sql/query mysql-db\\r\\n      [\\"select table_name from tables\\"]\\r\\n      \:row-fn \:table_name)))" "(ns mysql\\r\\n   (\:require [clojure.contrib.sql \:as sql]))" "(ns mysql\\r\\n      (\:require [clojure.contrib.sql \:as sql]))" "(ns test.core\\r\\n      (\:require [clojure.java.jdbc \:as sql]))\\r\\n   (defn -main []\\r\\n      (def mysql-db {\\r\\n         \:subprotocol \\"mysql\\"\\r\\n         \:subname \\"//10.10.10.101\:3306/kavya\\"\\r\\n         \:user \\"arun\\"\\r\\n         \:password \\"welcome\\"})\\r\\n      (println (sql/query mysql-db\\r\\n         [\\"select table_name from tables\\"]\\r\\n         \:row-fn \:table_name)))" "(ns test.core\\r\\n         (\:require [clojure.java.jdbc \:as sql]))\\r\\n      (defn -main []\\r\\n         (def mysql-db {\\r\\n            \:subprotocol \\"mysql\\"\\r\\n            \:subname \\"//10.10.10.101\:3306/kavya\\"\\r\\n            \:user \\"arun\\"\\r\\n            \:password \\"welcome\\"})\\r\\n         (println (sql/query mysql-db\\r\\n            [\\"select table_name from tables\\"]\\r\\n            \:row-fn \:table_name)))" "(ns mysql\\r\\n   (\:require [clojure.contrib.sql \:as sql]))" "(ns mysql\\r\\n      (\:require [clojure.contrib.sql \:as sql]))" "(ns mysql\\r\\n         (\:require [clojure.contrib.sql \:as sql]))" " (ns test.core\\r\\n            (\:require [clojure.java.jdbc \:as sql]))\\r\\n         (defn -main []\\r\\n            (def mysql-db {\\r\\n               \:subprotocol \\"mysql\\"\\r\\n               \:subname \\"//10.10.10.101\:3306/kavya\\"\\r\\n               \:user \\"arun\\"\\r\\n               \:password \\"welcome\\"})\\n             (println (sql/query mysql-db\\r\\n               [\\"select table_name from tables\\"]\\r\\n               \:row-fn \:table_name)))" "(require '[clojure.java.jdbc \:as j])" "(ns mysql\\r\\n   (\:require [clojure.contrib.sql \:as sql]))" "(require '[clojure.java.jdbc \:as j])" "(def db {\:classname \\"com.mysql.jdbc.Driver\\"\\r\\n          \:subprotocol \\"mysql\\"\\r\\n          \:subname \\"//10.10.10.101\:3306/dummy\\"\\r\\n          \:user \\"arun\\"\\r\\n          \:password \\"welcome\\"})" "(def db {\:classname \\"com.mysql.jdbc.Driver\\"\\r\\n          \:subprotocol \\"mysql\\"\\r\\n          \:subname \\"//localhost\:3306/kavya\\"\\r\\n          \:user \\"duser\\"\\r\\n          \:password \\"dpass\\"})" "(defn create-users []\\r\\n   (sql/create-table\\r\\n    \:users\\r\\n    [\:id \:integer \\"PRIMARY KEY\\" \\"AUTO_INCREMENT\\"]\\r\\n    [\:fname \\"varchar(25)\\"]\\r\\n    [\:lname \\"varchar(25)\\"]))" "(defn create-users []\\r\\n   (j/create-table\\r\\n    \:users\\r\\n    [\:id \:integer \\"PRIMARY KEY\\" \\"AUTO_INCREMENT\\"]\\r\\n    [\:fname \\"varchar(25)\\"]\\r\\n    [\:lname \\"varchar(25)\\"]))" "(defn list-users []\\r\\n  (sql/with-connection db\\r\\n    (sql/with-query-results rows\\r\\n      [\\"select * from user\\"]\\r\\n      (println rows))))" "(ns mysql\\r\\n   (\:require [clojure.contrib.sql \:as sql]))" "<type clojure code here>" "(ns mysql\\r\\n      (\:require [clojure.contrib.sql \:as sql]))" "(ns mysql\\r\\n         (\:require [clojure.contrib.sql \:as sql]))" "(require '[clojure.java.jdbc \:as j])" "(require '[honeysql.core \:as sql]\\r\\n         '[honeysql.helpers \:refer \:all])" "ns mysql.core\\r\\n  (\:require [clojure.java.jdbc \:as sql])" "\:require [clojure.java.jdbc \:as sql]" "(ns mysql.core\\r\\n  (\:require [clojure.java.jdbc \:as sql]))" "(def db {\:classname \\"com.mysql.jdbc.Driver\\"\\r\\n         \:subprotocol \\"mysql\\"\\r\\n         \:subname \\"//10.10.10.101\:3306/kavya\\"\\r\\n         \:user \\"arun\\"\\r\\n         \:password \\"welcome\\"})\\r\\n\\r\\n(defn list-users []\\r\\n  (sql/with-connection db\\r\\n    (sql/with-query-results rows\\r\\n      [\\"select * from Cars\\"]\\r\\n      (println rows))))" "(load \\"/mysql/core\\")" "(mysql.core/list-users)" "(ns mysql.core\\r\\n     (\:require [clojure.java.jdbc \:as sql]))" "(def db {\:classname \\"com.mysql.jdbc.Driver\\"\\r\\n            \:subprotocol \\"mysql\\"\\r\\n            \:subname \\"//10.10.10.101\:3306/kavya\\"\\r\\n            \:user \\"arun\\"\\r\\n            \:password \\"welcome\\"})\\r\\n   \\r\\n   (defn list-users []\\r\\n     (sql/with-connection db\\r\\n       (sql/with-query-results rows\\r\\n         [\\"select * from Cars\\"]\\r\\n         (println rows))))" "(mysql.core/list-users)" "(list-users)" "(db)" "(println db)" "(ns mysql.core\\r\\n     (\:require [clojure.java.jdbc \:as sql]))" "(def db {\:classname \\"com.mysql.jdbc.Driver\\"\\r\\n            \:subprotocol \\"mysql\\"\\r\\n            \:subname \\"//10.10.10.101\:3306/kavya\\"\\r\\n            \:user \\"arun\\"\\r\\n            \:password \\"welcome\\"})" " (defn list-users []\\r\\n     (sql/with-connection db\\r\\n       (sql/with-query-results rows\\r\\n         [\\"select * from Cars\\"]\\r\\n         (println rows))))" "(list-users)" "(row-fn)" "(nem)" "(name)" "(result-set-fn)" "(first)" "(jdbc/query db-spec [\\"SELECT * FROM user_details\\"])" "\\"k\\"" "\\"hjklnkln\\"" "(jdbc/create-table-ddl \:fruit\\r\\n                    [\:name \\"varchar(32)\\" \:primary \:key]\\r\\n                    [\:appearance \\"varchar(32)\\"]\\r\\n                    [\:cost \:int]\\r\\n                    [\:grade \:real]\\r\\n                    \:table-spec \\"ENGINE\=InnoDB\\"\\r\\n                    \:entities clojure.string/upper-case)" "(jdbc/insert\! db-spec \:fruit {\:name \\"Pear\\" \:appearance \\"green\\" \:cost 99})\\r\\n\\r\\n(jdbc/insert\! db-spec \:fruit\\r\\n           {\:name \\"Pomegranate\\" \:appearance \\"fresh\\" \:cost 585}\\r\\n           {\:name \\"Kiwifruit\\" \:grade 93})\\r\\n\\r\\n(jdbc/query db-spec [\\"SELECT * FROM fruit\\"])" "(defn list-users []\\r\\n        (jdbc/with-db-connection db-spec\\r\\n          (jdbc/query rows\\r\\n            [\\"select * from fruit\\"]\\r\\n            (println rows))))\\r\\n\\r\\n(list-users)" "(list-users)" "(j/create-table-ddl \:fruit\\r\\n                    [\:name \\"varchar(32)\\" \:primary \:key]\\r\\n                    [\:appearance \\"varchar(32)\\"]\\r\\n                    [\:cost \:int]\\r\\n                    [\:grade \:real]\\r\\n                    \:table-spec \\"ENGINE\=InnoDB\\"\\r\\n                    \:entities clojure.string/upper-case)" "(j/insert\! db-spec \:fruit\\r\\n           {\:name \\"Pomegranate\\" \:appearance \\"fresh\\" \:cost 585}\\r\\n           {\:name \\"Kiwifruit\\" \:grade 93})" "(j/query db-spec [\\"SELECT * FROM fruit\\"])" "(sql/with-connection\\r\\n   db\\r\\n   (sql/transaction\\r\\n     (create-blogs)))" "(rs)" "(row-fn)" "(\:rowfn)" "(cost)" "(result-set-fn)" "(identity)" "(name)" "(\:name)" "(\:row-fn)" "(desrib)" "(describ)"]
eclipse.preferences.version=1
